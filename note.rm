## Pug
EJS e Pug s√£o semelhantes no sentido de que ambos s√£o motores de template usados para renderizar HTML no lado do servidor em aplica√ß√µes Node.js. No entanto, eles t√™m diferen√ßas significativas em sintaxe e abordagem.

### Semelhan√ßas:
**Renderiza√ß√£o de HTML Din√¢mico:**
- Ambos permitem a inser√ß√£o de dados din√¢micos em p√°ginas HTML.
- Exemplo: Exibir uma lista de itens passada pelo servidor.

**Integra√ß√£o com Express:**
- Ambos podem ser configurados como motores de visualiza√ß√£o no Express usando `app.set('view engine', ...)`.

**Suporte a L√≥gica B√°sica:**
- Ambos suportam l√≥gica b√°sica, como loops (`for`) e condicionais (`if`), dentro dos templates.

---

### Uso de `block` no Pug
No Pug, o `block` √© usado para definir √°reas de um layout que podem ser preenchidas ou sobrescritas por outros templates que estendem esse layout. Ele √© essencial para criar layouts reutiliz√°veis.

#### Como funciona:
**Definir um `block` no layout principal:**
- No arquivo de layout principal (exemplo: `main-layout.pug`), voc√™ define um `block` como um espa√ßo reservado.

**Preencher o `block` em um template filho:**
- Um arquivo que estende o layout pode preencher ou sobrescrever o conte√∫do do `block`.

#### Resumo:
- O `block` √© um espa√ßo reservado no layout principal.
- Ele permite que templates filhos insiram ou sobrescrevam conte√∫do espec√≠fico.
- √â √∫til para criar layouts consistentes e reutiliz√°veis em aplica√ß√µes.

#### Nota sobre Layouts em Motores de Template
**Objetivo dos Layouts:**

**Reutiliza√ß√£o de C√≥digo:**
Layouts definem a estrutura fixa (ex: cabe√ßalho, rodap√©), enquanto p√°ginas individuais fornecem o conte√∫do.

**Consist√™ncia:**
Garante visual e estrutura iguais em todas as p√°ginas.

**Facilidade de Manuten√ß√£o:**
Mudan√ßas em cabe√ßalho ou rodap√© s√£o feitas em um √∫nico lugar e valem para todas as p√°ginas.


##HandleBars
 
Handlebars is a JavaScript template engine used to generate dynamic HTML on the server or client side. 
It allows you to create reusable and dynamic HTML pages by inserting data and basic logic directly 
into the template.


---

### üìÑ Notes on Handlebars - Usage Example

This example demonstrates how to use **conditionals** and **loops** with the [Handlebars](https://handlebarsjs.com/) templating language.

---

#### ‚úÖ Conditional with `{{#if}}`

```handlebars
{{#if isAdmin}}
    <p>Welcome, Admin!</p>
{{else}}
    <p>Welcome, User!</p>
{{/if}}
```

- **`isAdmin`** is a boolean variable passed to the template.
- If `true`, it displays ‚ÄúWelcome, Admin!‚Äù
- If `false`, it displays ‚ÄúWelcome, User!‚Äù

---

#### üîÅ Loop with `{{#each}}`

```handlebars
{{#each products}}
    <li>{{this.name}}</li>
{{/each}}
```

- Iterates over the `products` list.
- For each item, displays the `name` (`this.name`) inside an `<li>` element.

---

#### üìå Notes

- Handlebars is widely used for template rendering in web applications.
- It's commonly used with frameworks like **Express.js** in Node.js applications.

---
